),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0)),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h",
"Townhouse" = "t",
"Condo" = 'u'),
selected = 'h')
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = 'show_plot')
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
d <- d %>% filter(Rooms %in% input$bedroom_selection)
d <- d %>% filter(Distance>input$distance[1], Distance<input$distance[2])
distance <- input$distance
library(ggplot2)
if(input$Housing_Type == 'h')
{
d <- d %>% filter(d$Type == 'h')
ggplot(d, aes(y = d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else if (input$Housing_Type == 't')
{
d <- d %>% filter(d$Type == 't')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else
{
d <- d %>% filter(d$Type == 'u')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
})
}
# app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(lubridate)
d = read_csv('melb_data.csv')
variables_names = names(d)
ui <- fluidPage(
titlePanel("Melbourne Housing Data"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "bedroom_selection", label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0)),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h",
"Townhouse" = "t",
"Condo" = 'u'),
selected = 'h')
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = 'show_plot')
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
d <- d %>% filter(Rooms %in% input$bedroom_selection)
d <- d %>% filter(Distance>input$distance[1], Distance<input$distance[2])
distance <- input$distance
library(ggplot2)
if(input$Housing_Type == 'h')
{
d <- d %>% filter(d$Type == 'h')
ggplot(d, aes(y = d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else if (input$Housing_Type == 't')
{
d <- d %>% filter(d$Type == 't')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else
{
d <- d %>% filter(d$Type == 'u')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
})
}
# app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(lubridate)
d = read_csv('melb_data.csv')
variables_names = names(d)
ui <- fluidPage(
titlePanel("Melbourne Housing Data"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "bedroom_selection", label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0)),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h",
"Townhouse" = "t",
"Condo" = 'u'),
selected = 'h')
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = 'show_plot')
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
d <- d %>% filter(Rooms %in% input$bedroom_selection)
d <- d %>% filter(Distance>input$distance[1], Distance<input$distance[2])
distance <- input$distance
library(ggplot2)
if(input$Housing_Type == 'h')
{
d <- d %>% filter(d$Type == 'h')
ggplot(d, aes(y = d[v1], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else if (input$Housing_Type == 't')
{
d <- d %>% filter(d$Type == 't')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else
{
d <- d %>% filter(d$Type == 'u')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
})
}
# app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
d = read_csv('melb_data.csv')
variables_names = names(d)
ui <- navbarPage("Select Plot to View",
tabPanel("Bar Plot",
sidebarLayout(
sidebarPanel(
selectInput(
inputId ="var1",
label = "Select a Categorical Variable",
choices = variables_names, selected = "Type"
)
),
mainPanel(
plotOutput(outputId = 'show_plot')
)
)
),
tabPanel("Density Plot",
sidebarLayout(
sidebarPanel(
selectInput(
inputId ="var2",
label = "Select a Categorical Variables",
choices = variables_names, selected = "Sex"
),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
),
checkboxGroupInput(inputId = "bedroom_selection",
label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE)
),
mainPanel(
plotOutput(outputId = 'show_plot2')
)
)
),
tabPanel("Smooth Plot",
sidebarLayout(
sidebarPanel(
selectInput(
inputId ="var2",
label = "Select a Categorical Variables",
choices = variables_names, selected = "Sex"
),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
)
),
mainPanel(
plotOutput(outputId = 'show_plot2')
)
)
),
tabPanel("Scatter Plot",
sidebarLayout(
sidebarPanel(
selectInput(
inputId ="var2",
label = "Select a Categorical Variables",
choices = variables_names, selected = "Sex"
),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h","Townhouse" = "t","Condo" = 'u'),
selected = 'h'
),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0))
),
mainPanel(
plotOutput(outputId = 'show_plot2')
)
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
library(ggplot2)
ggplot(d, aes(x = d[[v1]]))+
geom_bar()+
labs(x = v1)
})
output$show_plot2 <- renderPlot({
v2 = input$var2
library(ggplot2)
ggplot(d, aes(x = d[[v2]]))+
geom_bar()+
labs(x = v2)
})
}
# app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(lubridate)
d = read_csv('melb_data.csv')
variables_names = names(d)
ui <- fluidPage(
titlePanel("Melbourne Housing Data"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "bedroom_selection", label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0)),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h",
"Townhouse" = "t",
"Condo" = 'u'),
selected = 'h')
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = 'show_plot')
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
d <- d %>% filter(Rooms %in% input$bedroom_selection)
d <- d %>% filter(Distance>input$distance[1], Distance<input$distance[2])
distance <- input$distance
library(ggplot2)
if(input$Housing_Type == 'h')
{
d <- d %>% filter(d$Type == 'h')
ggplot(d, aes(y = d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else if (input$Housing_Type == 't')
{
d <- d %>% filter(d$Type == 't')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else
{
d <- d %>% filter(d$Type == 'u')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
})
}
# app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(lubridate)
d = read_csv('melb_data.csv')
variables_names = names(d)
ui <- fluidPage(
titlePanel("Melbourne Housing Data"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "bedroom_selection", label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0)),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h",
"Townhouse" = "t",
"Condo" = 'u'),
selected = 'h')
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = 'show_plot')
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
d <- d %>% filter(Rooms %in% input$bedroom_selection)
d <- d %>% filter(Distance>input$distance[1], Distance<input$distance[2])
distance <- input$distance
library(ggplot2)
if(input$Housing_Type == 'h')
{
d <- d %>% filter(d$Type == 'h')
ggplot(d, aes(y = d$v1, x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else if (input$Housing_Type == 't')
{
d <- d %>% filter(d$Type == 't')
ggplot(d, aes(y= d$v1, x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else
{
d <- d %>% filter(d$Type == 'u')
ggplot(d, aes(y= d$v1, x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
})
}
# app
shinyApp(ui = ui, server = server)
library(tidyverse)
library(shiny)
library(lubridate)
d = read_csv('melb_data.csv')
variables_names = names(d)
ui <- fluidPage(
titlePanel("Melbourne Housing Data"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "bedroom_selection", label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
),
sliderInput(inputId = "distance",
"Select Distance Range:",
min = min(d$Distance, na.rm=TRUE),
max = max(d$Distance, na.rm=TRUE),
value= c(2.5, 10.0)),
radioButtons(inputId = "Housing_Type",
label = h3("Select House Type:"),
choices = c("House" = "h",
"Townhouse" = "t",
"Condo" = 'u'),
selected = 'h')
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = 'show_plot')
)
)
)
# server is a function!
server <- function(input, output) {
output$show_plot <- renderPlot({
v1 = input$var1
d <- d %>% filter(Rooms %in% input$bedroom_selection)
d <- d %>% filter(Distance>input$distance[1], Distance<input$distance[2])
distance <- input$distance
library(ggplot2)
if(input$Housing_Type == 'h')
{
d <- d %>% filter(d$Type == 'h')
view(d)
ggplot(d, aes(y = d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else if (input$Housing_Type == 't')
{
d <- d %>% filter(d$Type == 't')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
else
{
d <- d %>% filter(d$Type == 'u')
ggplot(d, aes(y= d[[v1]], x= distance))+
geom_smooth()+
labs(y = v1, x = 'Distance')
}
})
}
# app
shinyApp(ui = ui, server = server)
d = read_csv('melb_data.csv')
variables_names = names(d)
d <- d %>% filter(Rooms %in% input$bedroom_selection)
variables_names = names(d)
ui <- fluidPage(
titlePanel("Melbourne Housing Data"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = "bedroom_selection", label = "Select Number of Bedrooms",
choices = names(table(d$Rooms)), inline = TRUE),
selectInput(
inputId ="var1",
label = "Select a Numeric Variables",
choices = variables_names, selected = "Price"
